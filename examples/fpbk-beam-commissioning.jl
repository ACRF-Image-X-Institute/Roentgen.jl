#=
    Commissioning a beam for the Finite Pencil Beam Kernel

This script will commission a beam for the `FinitePencilBeamKernel` dose calculation
algorithm. It reads water phantom data from "examples/sample-data/water-tank-dose.hdf5",
which is either measured by experiment, or generated by a Monte-Carlo simulation.
It stores the commissioned kernel in "examples/sample-data/dose-kernel/finite-pencil-beam-kernel.hdf5"
=#

using DoseCalculations
using Plots, StaticArrays
using Interpolations, LsqFit, HDF5
using Statistics

#--- Set Parameters ------------------------------------------------------------

SSD = 1000.
SAD = SSD
fieldsize = 100.

#---  Load Data ----------------------------------------------------------------

begin
    dosefilepath = "examples/sample-data/water-tank-dose.hdf5"
    x, depth, measured_dose = h5open(dosefilepath, "r") do fid
        x = read(fid["x"])
        z = read(fid["depth"])
        dose = read(fid["dose/fieldsize-$(Int(fieldsize))mm"])
        
        x, z, dose
    end
end

heatmap(x, depth, measured_dose', title="Measured Dose",
        xlabel="Off-Axis Position (mm)", ylabel="Depth (mm)")

#--- Fit Steepness and Weight Parameters ---------------------------------------

# Scale offaxis dose profiles by dose along the central axis
ix = searchsortedfirst(x, 0.)
measured_dose_scaled = measured_dose./measured_dose[ix, :]'

heatmap(x, depth, measured_dose_scaled', title="Measured Dose (Scaled)",
        xlabel="Off-Axis Position (mm)", ylabel="Depth (mm)")

# Scale off-axis position to iso-center
x′ = @. x*SAD/(SAD+depth')
begin
    p = plot(ylabel="Dose (Scaled)", xlabel=xlabel="Scaled Off-Axis Position (mm)")
    for i in axes(measured_dose_scaled, 2)
        plot!(p, x′[:, i], measured_dose_scaled[:, i], label="")
    end
    p
end

# Create Model

profile_at_depth(x, w, ux, x₀) = DoseCalculations.fpbk_dose(x, 0., w, ux, ux, x₀, x₀)

function model(x, p, fieldsize)
    a = p[1]
    w = p[2]
    ux = @view p[3:4]

    a*profile_at_depth.(x, w, Ref(ux), 0.5*fieldsize)
end

# Least Squares Fit

function fit_profile(x′, measured_dose, fieldsize)
    p0 = [1., 0.2, 0.03, 0.4]

    lb = [-Inf, 0., 0., 0.]
    ub = [Inf, 1., Inf, Inf]


    fit = curve_fit((x, p)->model(x, p, fieldsize),
                    x′, measured_dose, p0,
                    lower=lb, upper=ub)

    !fit.converged && return fill(NaN, 4), fill(NaN, 4)

    a, w, ux1, ux2 = fit.param
    errors = standard_errors(fit)
    if(ux1>ux2)
        w = 1-w
        ux1, ux2 = ux2, ux1
    end
    [a, w, ux1, ux2], errors
end

# Fit parameters

params = zeros(4, length(depth))
errors = zeros(4, length(depth))
for i in axes(params, 2)
    p, ε = fit_profile(x′[:, i], measured_dose_scaled[:, i], fieldsize)
    params[:, i] .= p
    errors[:, i] .= ε
end

begin
    ylabels = ["a", "w", "ux₁", "ux₂"]
    p = [plot(depth, params[i, :], yerr=errors[i, :], legend=false, ylabel=ylabels[i]) for i in axes(params, 1)]
    plot(p..., layout=grid(2, 2), figheight=(12, 5))
end

begin
    i = searchsortedlast(depth, 100.)

    p = plot(xlabel="Scaled Off-Axis Position (mm)", ylabel="Dose (Scaled)",
             title="Depth $(depth[i])mm")
    plot!(p, x′[:, i], measured_dose_scaled[:, i], label="Measured")
    xᵢ′ = x′[1, i]:1.:x′[end, i]

    profile = params[1, i]*profile_at_depth.(xᵢ′, params[2, i], Ref(params[3:4, i]), 0.5*fieldsize)
    plot!(p, xᵢ′, profile, label="Fitted")
end

#--- Compute Scaling Factor ---------------------------------------------------

R = @. depth + SAD

Rmax = depth[end]+SAD
xmax = maximum(abs.(x))

tanθmax = xmax/Rmax
tanθ = range(0., tanθmax, length=201)
θ = atan.(tanθ)

function scaling_factor(d, tanθ, R, D, param)

    secθ = √(tanθ^2 + 1)

    d′ = d*secθ
    R′ = R*secθ
    x = R*tanθ

    w, ux1, ux2 = param(d′)

    F = profile_at_depth(SAD*x/R′, w, [ux1, ux2], 0.5*fieldsize)
    exp(D(x))*R′^2/F
end

# Set up Interpolators for parameters and measured dose
p = SVector{3}.(eachcol(params[2:4, :]))
p = linear_interpolation(depth, p, extrapolation_bc=Flat())

D = linear_interpolation.(Ref(x), eachcol(log.(measured_dose)), extrapolation_bc=Line())

# Compute Scaling Factor
A = scaling_factor.(depth, θ', R, D, Ref(p))

heatmap(rad2deg.(θ), depth, A, xlabel="θ (°)", ylabel="Depth (mm)")

#--- Verify Result ------------------------------------------------------------

# Create Kernel
parameters = vcat(params[2:end, :], params[3:4, :])

calc = FinitePencilBeamKernel(depth, parameters, tanθ, A; maxradius=280.)

# Create dose positions, external surface, gantry and beamlet
pos = @. SVector(x, x[ix], -depth')
surf = PlaneSurface(SSD)
gantry = GantryPosition(0., 0., SAD)
beamlet = Beamlet(Bixel(0., fieldsize), gantry)

# Compute dose
dose = DoseCalculations.point_dose.(pos, Ref(beamlet), Ref(surf), Ref(calc))

# Calculate error
√sum(@. (dose-measured_dose)^2)

# Plot
heatmap(x, depth, measured_dose', xlabel="x (mm)", ylabel="Depth (mm)",
        title="Measured Dose", aspect_ratio=1)

heatmap(x, depth, dose', xlabel="x (mm)", ylabel="Depth (mm)",
        title="Computed Dose", aspect_ratio=1)
heatmap(x, depth, dose'-measured_dose', xlabel="x (mm)", ylabel="Depth (mm)",
        title="Measured Dose", aspect_ratio=1)

#--- Save to File --------------------------------------------------------------

h5open("examples/sample-data/dose-kernel/finite-pencil-beam-kernel.hdf5", "w") do fid
    group = create_group(fid, "fieldsize-$(Int(fieldsize))mm")

    attributes(group)["fieldsize"] = fieldsize

    group["parameters"] = parameters
    group["depth"] = depth
    group["scaling_factor"] = A
    group["tan_theta"] = collect(tanθ)
end
